// Code generated by MockGen. DO NOT EDIT.
// Source: gopkg.in/gomail.v2 (interfaces: SendCloser)

// Package mocks is a generated GoMock package.
package mocks

import (
	gomock "github.com/golang/mock/gomock"
	io "io"
	reflect "reflect"
)

// MockSendCloser is a mock of SendCloser interface
type MockSendCloser struct {
	ctrl     *gomock.Controller
	recorder *MockSendCloserMockRecorder
}

// MockSendCloserMockRecorder is the mock recorder for MockSendCloser
type MockSendCloserMockRecorder struct {
	mock *MockSendCloser
}

// NewMockSendCloser creates a new mock instance
func NewMockSendCloser(ctrl *gomock.Controller) *MockSendCloser {
	mock := &MockSendCloser{ctrl: ctrl}
	mock.recorder = &MockSendCloserMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockSendCloser) EXPECT() *MockSendCloserMockRecorder {
	return m.recorder
}

// Close mocks base method
func (m *MockSendCloser) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close
func (mr *MockSendCloserMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockSendCloser)(nil).Close))
}

// Send mocks base method
func (m *MockSendCloser) Send(arg0 string, arg1 []string, arg2 io.WriterTo) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send
func (mr *MockSendCloserMockRecorder) Send(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockSendCloser)(nil).Send), arg0, arg1, arg2)
}
